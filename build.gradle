buildscript {
    repositories {
        maven { url = "https://maven.minecraftforge.net/" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
		maven { url "https://repo.spongepowered.org/repository/maven-public" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath "org.spongepowered:mixingradle:0.7.+"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'java'

//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
version = '0.0.7-b17'
group = 'com.github.mrmks.mc' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'LegacyModsFix'

//java.toolchain.languageVersion = JavaLanguageVersion.of(8)

String fg2CompatDir = 'D:/Users/MrMks/.gradle/caches/minecraft/de/oceanlabs/mcp/mcp_stable/39'

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    accessTransformers file('ccl_at.cfg')
    accessTransformers file('touhou_little_maid_at.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'fml.coreMods.load', 'com.github.mrmks.mc.lmf.core.FMLPluginImpl'

            property 'fml.debugAccessTransformer', 'true'

            property 'mrmks.lmf.saveDump', "./dump"

            // // CodeChickenLib compat
            property 'net.minecraftforge.gradle.GradleStart.srgDir', "$fg2CompatDir/1.12.2/srgs"
            property 'net.minecraftforge.gradle.GradleStart.srg.notch-srg', "$fg2CompatDir/1.12.2/srgs/notch-srg.srg"
            property 'net.minecraftforge.gradle.GradleStart.srg.notch-mcp', "$fg2CompatDir/1.12.2/srgs/notch-mcp.srg"
            property 'net.minecraftforge.gradle.GradleStart.srg.srg-mcp', "$fg2CompatDir/1.12.2/srgs/srg-mcp.srg"
            property 'net.minecraftforge.gradle.GradleStart.srg.mcp-srg', "$fg2CompatDir/1.12.2/srgs/mcp-srg.srg"
            property 'net.minecraftforge.gradle.GradleStart.srg.mcp-notch', "$fg2CompatDir/1.12.2/srgs/mcp-notch.srg"
            property 'net.minecraftforge.gradle.GradleStart.csvDir', "$fg2CompatDir"
        }
        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'fml.coreMods.load', 'com.github.mrmks.mc.lmf.core.FMLPluginImpl'

            property 'fml.debugAccessTransformer', 'true'

            // // CodeChickenLib compat
            property 'net.minecraftforge.gradle.GradleStart.srgDir', "$fg2CompatDir/1.12.2/srgs"
            property 'net.minecraftforge.gradle.GradleStart.srg.notch-srg', "$fg2CompatDir/1.12.2/srgs/notch-srg.srg"
            property 'net.minecraftforge.gradle.GradleStart.srg.notch-mcp', "$fg2CompatDir/1.12.2/srgs/notch-mcp.srg"
            property 'net.minecraftforge.gradle.GradleStart.srg.srg-mcp', "$fg2CompatDir/1.12.2/srgs/srg-mcp.srg"
            property 'net.minecraftforge.gradle.GradleStart.srg.mcp-srg', "$fg2CompatDir/1.12.2/srgs/mcp-srg.srg"
            property 'net.minecraftforge.gradle.GradleStart.srg.mcp-notch', "$fg2CompatDir/1.12.2/srgs/mcp-notch.srg"
            property 'net.minecraftforge.gradle.GradleStart.csvDir', "$fg2CompatDir"
        }
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "mixins.legacymodsfix.refmap.json"

    debug.export = true
    debug.verbose = true
}

repositories {
    flatDir { dirs 'libs' }
    mavenCentral()
    maven {
        url = "https://files.minecraftforge.net/maven/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'
    compileOnly 'org.jetbrains:annotations:23.0.0'

    compileOnly fg.deobf('_:CodeChickenLib-1.12.2:3.2.3.357:universal')
    compileOnly fg.deobf('_:ForgeMultipart-1.12.2:2.6.2.83:universal')
    compile fg.deobf('_:thutcore-1.12.2:5.21.0')
    compile fg.deobf('_:cfm:6.3.0-mc1.12.2')
    compileOnly fg.deobf('_:chiselsandbits:14.33')
    compileOnly fg.deobf('_:NyaSamaCompletePack-v2-mcg:201001:a')
    compileOnly fg.deobf('_:NyaSamaCompletePack-v2-mcg:201001:b')
    compile fg.deobf('_:Armourers-Workshop-1.12.2:0.51.0')
    compileOnly fg.deobf('_:touhoulittlemaid-1.12.2:1.2.5:release')
    compileOnly fg.deobf('_:foamfix:0.10.8-1.12.2')

    runtimeOnly '_:CodeChickenLib-1.12.2:3.2.3.357-universal'
//    runtimeOnly '_:chiselsandbits-14.33'

    shade ('org.spongepowered:mixin:0.8.3') {
        exclude module: "asm-commons"
        exclude module: "asm-tree"
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "log4j-core"
        exclude module: "gson"
        exclude module: "commons-io"
    }
    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'
}

compileJava {
    inputs.property "version", project.version
//    filesMatching 'mcmod.info', {
//        expand 'version': project.version
//    }
}

processResources {
    inputs.property "version", project.version
    filesMatching 'mcmod.info', {
        expand 'version': project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
//    archiveClassifier.set "trace"
    manifest {
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
        attributes 'FMLCorePlugin': 'com.github.mrmks.mc.lmf.core.FMLPluginImpl'
        attributes 'FMLCorePluginContainsFMLMod': 'false'
    }
}

task shadowJar(type: Jar) {
    archiveClassifier.set "fat"
    from {
        project.configurations.shade.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude "META-INF/*"
    manifest.from jar.manifest

    with jar
}

artifacts {
    archives shadowJar
}

reobf {
    shadowJar {}
}